[{"filePath":"/Users/nicsmeyer/Documents/VSProjects/APDS7311-POE/client/checkEnv.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":8,"column":5,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":8,"endColumn":19},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":26,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":26,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[738,838],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":30,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":30,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[888,912],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":34,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":34,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1014,1132],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":37,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":37,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1143,1203],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":42,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":42,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1306,1366],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Plugin } from \"vite\";\nimport * as dotenv from \"dotenv\";\nimport * as path from \"path\";\n\nexport default function checkEnvPlugin(): Plugin {\n  return {\n    name: \"vite-plugin-check-env\",\n    configResolved() {\n      // Load environment variables from .env file\n      const envPath = path.resolve(__dirname, \".env\");\n      dotenv.config({ path: envPath });\n\n      const placeholders = {\n        VITE_SWIFT_CODE_VALIDATOR_API_KEY: \"your_swift_code_validator_api_key\",\n      };\n\n      const invalidVars: string[] = [];\n\n      for (const [key, placeholder] of Object.entries(placeholders)) {\n        if (process.env[key] === placeholder) {\n          invalidVars.push(key);\n        }\n      }\n\n      if (invalidVars.length > 0) {\n        console.log(\n          \"The following environment variables are invalid or placeholders:\"\n        );\n        invalidVars.forEach((key) => {\n          console.log(`- ${key}`);\n        });\n\n        if (invalidVars.includes(\"REACT_APP_SWIFT_CODE_VALIDATOR_API_KEY\")) {\n          console.log(\n            \"Please set a valid API key for the Swift Code Validator. You can get one from:\"\n          );\n          console.log(\"https://api-ninjas.com/api/swift-code-lookup\");\n        }\n\n        process.exit(1); // Exit the application with an error code\n      } else {\n        console.log(\"All environment variables are set correctly.\");\n      }\n    },\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/nicsmeyer/Documents/VSProjects/APDS7311-POE/client/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/nicsmeyer/Documents/VSProjects/APDS7311-POE/client/src/App.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":13,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":13,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import \"./App.css\";\nimport { Routes, Route, useLocation } from \"react-router-dom\";\nimport Navbar from \"./components/Navbar\";\nimport Home from \"./pages/Home\";\nimport Register from \"./pages/Register\";\nimport Login from \"./pages/Login\";\nimport CustomerDashboard from \"./pages/CustomerDashboard\";\nimport CustomerPaymentForm from \"./pages/CustomerPaymentForm\";\nimport EmployeeLogin from \"./pages/EmployeeLogin\";\nimport Transactions from \"./pages/Transactions\";\nimport EmployeeDashboard from \"./pages/EmployeeDashboard\";\n\nfunction App() {\n  const location = useLocation();\n\n  return (\n    <>\n      {/* Conditionally render Navbar */}\n      {location.pathname !== \"/customer-dashboard\" &&\n        location.pathname !== \"/customer-payment-form\" &&\n        location.pathname !== \"/transactions\" && <Navbar />}\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/register\" element={<Register />} />\n        <Route path=\"/login\" element={<Login />} />\n        <Route path=\"/customer-dashboard\" element={<CustomerDashboard />} />\n        <Route\n          path=\"/customer-payment-form\"\n          element={<CustomerPaymentForm />}\n        />\n        <Route path=\"/employee-login\" element={<EmployeeLogin />} />\n        <Route path=\"/transactions\" element={<Transactions />} />\n        <Route path=\"/employee-dashboard\" element={<EmployeeDashboard />} />\n      </Routes>\n    </>\n  );\n}\n\nexport default App;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/nicsmeyer/Documents/VSProjects/APDS7311-POE/client/src/components/ErrorTextBox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/nicsmeyer/Documents/VSProjects/APDS7311-POE/client/src/components/Navbar.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":5,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":5,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Link } from \"react-router-dom\";\nimport \"../css/Navbar.css\";\nimport piggyBankImage from \"../assets/Images/piggy-bank.png\"; // Import the image if it's in the src folder\n\nexport default function Navbar() {\n  return (\n    <nav className=\"navbar\">\n      <div className=\"brand\">\n        <img src={piggyBankImage} alt=\"banking app\" />\n        <p>E-Z Banking</p>\n      </div>\n      <div className=\"nav-links\">\n        <Link className=\"nav-link\" to=\"/\">\n          Home\n        </Link>\n        <Link className=\"nav-link\" to=\"/register\">\n          Register\n        </Link>\n        <Link className=\"nav-link\" to=\"/login\">\n          Login\n        </Link>\n      </div>\n    </nav>\n  );\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/nicsmeyer/Documents/VSProjects/APDS7311-POE/client/src/components/SwiftCodeTextBox.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":4,"column":7,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":4,"endColumn":66},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":21,"column":76,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":21,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":47,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":47,"endColumn":37},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":47,"column":24,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":47,"endColumn":31,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1509,1516],"text":"(Boolean(API_KEY))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":53,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":53,"endColumn":43},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":54,"column":13,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":54,"endColumn":17,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1672,1676],"text":"(Boolean(data))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `any` value.","line":54,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":54,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":57,"column":23,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":57,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `any` value.","line":57,"column":28,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":57,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":78,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":78,"endColumn":32},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":88,"column":44,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":88,"endColumn":63}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport ErrorTextBox from \"./ErrorTextBox\";\nimport \"../css/SwiftCodeTextBox.css\";\nconst API_KEY = import.meta.env.VITE_SWIFT_CODE_VALIDATOR_API_KEY;\n\nconst SwiftCodeTextBox: React.FC<{\n  value: string;\n  onChange: (value: string) => void;\n  onIsValidChange: (isValid: boolean) => void;\n}> = ({ value, onChange, onIsValidChange }) => {\n  const [hasError, setHasError] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [bankName, setBankName] = useState<string>(\"\");\n\n  // Basic SWIFT code format validation\n  const isValidSwiftFormat = (swift: string): boolean => {\n    const swiftRegex = /^[A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?$/;\n    return swiftRegex.test(swift);\n  };\n\n  const handleInputChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const swiftCode = e.target.value.toUpperCase(); // Convert to uppercase\n    onChange(swiftCode);\n    setHasError(false);\n    setBankName(\"\");\n\n    // Don't make API call unless we have at least 8 characters\n    if (swiftCode.length < 8) {\n      setHasError(true);\n      onIsValidChange(false);\n      return;\n    }\n\n    // Check format before making API call\n    if (!isValidSwiftFormat(swiftCode)) {\n      setHasError(true);\n      onIsValidChange(false);\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      const url = `https://api.api-ninjas.com/v1/swiftcode?swift=${swiftCode}`;\n      const response = await fetch(url, {\n        headers: {\n          \"X-Api-Key\": API_KEY || '',\n          \"Content-Type\": \"application/json\"\n        },\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        if (data && data.length > 0) {\n          setHasError(false);\n          onIsValidChange(true);\n          setBankName(data[0].bank_name);\n        } else {\n          setHasError(true);\n          onIsValidChange(false);\n          setBankName(\"\");\n        }\n      } else {\n        setHasError(true);\n        onIsValidChange(false);\n        setBankName(\"\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching SWIFT code data:\", error);\n      setHasError(true);\n      onIsValidChange(false);\n      setBankName(\"\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getErrorMessage = () => {\n    if (!value) return \"Please enter a SWIFT code\";\n    if (value.length < 8) return \"SWIFT code must be at least 8 characters\";\n    if (!isValidSwiftFormat(value)) return \"Invalid SWIFT code format\";\n    if (hasError) return \"Invalid SWIFT code\";\n    return \"\";\n  };\n\n  return (\n    <div>\n      <ErrorTextBox value={value} onChange={handleInputChange} error={hasError} />\n      {loading && <p className=\"loading-message\">Validating SWIFT code...</p>}\n      {hasError && <p className=\"error-message\">{getErrorMessage()}</p>}\n      {!hasError && bankName && (\n        <p className=\"success-message\">SWIFT code for {bankName} is valid!</p>\n      )}\n    </div>\n  );\n};\n\nexport default SwiftCodeTextBox;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/nicsmeyer/Documents/VSProjects/APDS7311-POE/client/src/main.tsx","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":7,"column":12,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":7,"endColumn":44}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App.tsx\";\nimport \"./index.css\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </StrictMode>\n);\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/nicsmeyer/Documents/VSProjects/APDS7311-POE/client/src/pages/CustomerDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":12,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":12,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":47,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":47,"endColumn":40},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":51,"column":34,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":51,"endColumn":36},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":55,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":55,"endColumn":39},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":65,"column":5,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":65,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":66,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":66,"endColumn":39},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":67,"column":11,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":67,"endColumn":15,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1915,1919],"text":"Boolean(name)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":67,"column":29,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":67,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":69,"column":5,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":69,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":70,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":70,"endColumn":43},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":71,"column":11,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":71,"endColumn":13,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2043,2045],"text":"Boolean(AN)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":71,"column":29,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":71,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":73,"column":5,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":73,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":74,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":74,"endColumn":43},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":75,"column":11,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":75,"endColumn":19,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2167,2175],"text":"Boolean(receipts)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<Receipt[]>`.","line":75,"column":33,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":75,"endColumn":41},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":78,"column":5,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":78,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":79,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":79,"endColumn":35},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":80,"column":11,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":80,"endColumn":12,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2289,2290],"text":"Boolean(B)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":80,"column":26,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":80,"endColumn":27},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":83,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":83,"endColumn":21,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2319,2319],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":84,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":84,"endColumn":27,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2340,2340],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":85,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":85,"endColumn":20,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2367,2367],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":86,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":86,"endColumn":25,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2387,2387],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":93,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":93,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":98,"column":51,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":98,"endColumn":53},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":101,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":101,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2747,2753],"text":"token == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2748,2753],"text":"(token ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2747,2753],"text":"!Boolean(token)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":132,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":132,"endColumn":48},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"any\" of template literal expression.","line":133,"column":34,"nodeType":"MemberExpression","messageId":"invalidType","endLine":133,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":133,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":133,"endColumn":49},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"number\" of template literal expression.","line":189,"column":45,"nodeType":"Identifier","messageId":"invalidType","endLine":189,"endColumn":50},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":217,"column":31,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":217,"endColumn":62}],"suppressedMessages":[],"errorCount":32,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useRef, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../css/CustomerDashboard.css\";\nimport { isAuthenticated } from \"../utils/auth\";\nimport {\n  getUserName,\n  getUserAccountNum,\n  getPayments,\n  getBalance,\n} from \"../services/dataRequestService\";\n\nfunction CustomerDashboard() {\n  const navigate = useNavigate();\n  const alertShown = useRef(false); // Ref to track if the alert has been shown\n  const [authChecked, setAuthChecked] = useState(false); // State to track if auth check is done\n\n  useEffect(() => {\n    if (!isAuthenticated() && !alertShown.current) {\n      alert(\"You are not logged in. Please log in to continue.\");\n      alertShown.current = true; // Set the ref to true after showing the alert\n      navigate(\"/login\");\n    } else {\n      setAuthChecked(true); // Set auth check to true if authenticated\n    }\n  }, [navigate]);\n\n  const [username, setUsername] = useState(\"\");\n  const [accountNum, setAccountNum] = useState(\"\");\n  const [ballance, setBallance] = useState(\"\");\n  interface Receipt {\n    _id: string;\n    transactionDate: string;\n    transactionDescription: string;\n    transferAmount: {\n      $numberDecimal: string;\n    };\n    approvalStatus: string;\n    recipientName: string;\n    recipientBank: string;\n    recipientAccountNumber: string;\n    currency: string;\n    swiftCode: string;\n  }\n\n  const [receipts, setReceipts] = useState<Receipt[]>([]);\n\n  const handleLocalPaymentClick = () => {\n    navigate(\"/customer-payment-form\");\n  };\n\n  const handleMainMenuClick = () => {\n    navigate(\"/\");\n  };\n\n  const handleTransactionClick = () => {\n    navigate(\"/transactions\");\n  };\n\n  useEffect(() => {\n    if (!authChecked) {\n      return; // Do nothing until auth check is done\n    }\n\n    // Fetch the user's name when the component loads\n    async function fetchUsername() {\n      const name = await getUserName();\n      if (name) setUsername(name);\n    }\n    async function fetchUserAccountNum() {\n      const AN = await getUserAccountNum();\n      if (AN) setAccountNum(AN);\n    }\n    async function fetchUserReceipts() {\n      const receipts = await getPayments();\n      if (receipts) setReceipts(receipts);\n    }\n\n    async function fetchBalance() {\n      const B = await getBalance();\n      if (B) setBallance(B);\n    }\n\n    fetchUsername();\n    fetchUserAccountNum();\n    fetchBalance();\n    fetchUserReceipts();\n  }, [authChecked]);\n\n  if (!authChecked) {\n    return null; // Render nothing until auth check is done\n  }\n\n  const handleLogOutClick = () => {\n    localStorage.removeItem(\"token\");\n    navigate(\"/login\");\n  };\n\n  const handlePayAgain = async (receipt: Receipt) => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('Please log in to make a payment');\n        return;\n      }\n\n      // Send the encrypted account number directly without trying to re-encrypt\n      const response = await fetch(\n        \"https://localhost:3000/api/transaction/transactFromReceipt\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${token}`\n          },\n          body: JSON.stringify({\n            recipientName: receipt.recipientName,\n            recipientBank: receipt.recipientBank,\n            recipientAccountNumber: receipt.recipientAccountNumber, // Send encrypted account number\n            transferAmount: receipt.transferAmount.$numberDecimal,\n            currency: receipt.currency,\n            swiftCode: receipt.swiftCode,\n            transactionDescription: receipt.transactionDescription,\n            transactionDate: new Date().toISOString(),\n          }),\n        }\n      );\n\n      if (response.ok) {\n        alert(\"Payment initiated successfully!\");\n        navigate(\"/transactions\");\n      } else {\n        const errorData = await response.json();\n        alert(`Payment failed: ${errorData.error}`);\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      alert(`Payment failed: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  };\n\n  return (\n    <div className=\"dashboard-container\">\n      {/* Side Navigation Bar */}\n      <div className=\"side-nav\">\n        <button className=\"nav-button\" onClick={handleMainMenuClick}>\n          Main Menu\n        </button>\n        <button className=\"nav-button\" onClick={handleTransactionClick}>\n          Transactions\n        </button>\n        <button className=\"nav-button\" onClick={handleLogOutClick}>\n          Log Out\n        </button>\n      </div>\n\n      {/* Main Dashboard Content */}\n      <div className=\"main-content\">\n        <h1>Customer Dashboard</h1>\n\n        {/* Greeting, Banking Details, and Payment Button Container */}\n        <div className=\"greeting-banking-container\">\n          <div className=\"greeting-section\">\n            <h2>Hello, {username}</h2>\n            <button\n              className=\"make-payment-button\"\n              onClick={handleLocalPaymentClick}\n            >\n              Make Payment\n            </button>\n          </div>\n\n          <div className=\"banking-details\">\n            <h2>Banking Details</h2>\n            <div className=\"details-box\">\n              <p>Acc No: {accountNum}</p>\n              <p>\n                <strong>Available Balance</strong>: $ {ballance}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Payment Receipts Section */}\n        <div className=\"payment-receipts\">\n          <h3>Payment Receipts</h3>\n          <div className=\"details-box\">\n            {receipts.length > 0 ? (\n              receipts.map((receipt, index) => (\n                <div key={`${receipt._id}-${index}`} className=\"receipt-card\">\n                  <div className=\"receipt-header\">\n                    <h4>Payment Receipt</h4>\n                    <span className=\"receipt-date\">\n                      {new Date(receipt.transactionDate).toLocaleString('en-US', {\n                        year: 'numeric',\n                        month: 'long',\n                        day: 'numeric',\n                        hour: '2-digit',\n                        minute: '2-digit'\n                      })}\n                    </span>\n                  </div>\n                  <div className=\"receipt-body\">\n                    <div className=\"receipt-row\">\n                      <span className=\"receipt-label\">Description:</span>\n                      <span className=\"receipt-value\">{receipt.transactionDescription}</span>\n                    </div>\n                    <div className=\"receipt-row\">\n                      <span className=\"receipt-label\">Amount:</span>\n                      <span className=\"receipt-value receipt-amount\">\n                        ${parseFloat(receipt.transferAmount.$numberDecimal).toFixed(2)}\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"receipt-footer\">\n                    <button \n                      className=\"pay-again-button\"\n                      onClick={() => handlePayAgain(receipt)}\n                    >\n                      Pay again\n                    </button>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <p>No completed payments found.</p>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CustomerDashboard;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/nicsmeyer/Documents/VSProjects/APDS7311-POE/client/src/pages/CustomerPaymentForm.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":15,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":15,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":44,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":44,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'accountNum' is assigned a value but never used.","line":47,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":49,"column":3,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":49,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":50,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":50,"endColumn":41},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":51,"column":9,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":51,"endColumn":11,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1990,1992],"text":"Boolean(AN)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":51,"column":27,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":51,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":54,"column":48,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":54,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2143,2146],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2143,2146],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":58,"column":41,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":58,"endColumn":43},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":59,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":59,"endColumn":27,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2157,2157],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":60,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":60,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .preventDefault on an `any` value.","line":60,"column":7,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":60,"endColumn":21},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":103,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":103,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3663,3669],"text":"token == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3664,3669],"text":"(token ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3663,3669],"text":"!Boolean(token)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":131,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":131,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4373,4415],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":134,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":134,"endColumn":43},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":135,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":135,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4534,4570],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":139,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":139,"endColumn":48},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":140,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":140,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4754,4792],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"any\" of template literal expression.","line":141,"column":34,"nodeType":"MemberExpression","messageId":"invalidType","endLine":141,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":141,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":141,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":143,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4896,4899],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4896,4899],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"any\" of template literal expression.","line":145,"column":32,"nodeType":"MemberExpression","messageId":"invalidType","endLine":145,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":145,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":145,"endColumn":45},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":153,"column":49,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":153,"endColumn":65},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":155,"column":54,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5320,5337],"text":"Recipient&apos;s Name:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5320,5337],"text":"Recipient&lsquo;s Name:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5320,5337],"text":"Recipient&#39;s Name:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5320,5337],"text":"Recipient&rsquo;s Name:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"@typescript-eslint/no-confusing-void-expression","severity":2,"message":"Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.","line":161,"column":32,"nodeType":"CallExpression","messageId":"invalidVoidExprArrow","endLine":161,"endColumn":64,"fix":{"range":[5530,5562],"text":"{ setRecipientName(e.target.value); }"}},{"ruleId":"@typescript-eslint/dot-notation","severity":2,"message":"[\"recipientName\"] is better written in dot notation.","line":164,"column":57,"nodeType":"Literal","messageId":"useDot","endLine":164,"endColumn":72,"fix":{"range":[5685,5702],"text":".recipientName"}},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":167,"column":54,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5811,5828],"text":"Recipient&apos;s Bank:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5811,5828],"text":"Recipient&lsquo;s Bank:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5811,5828],"text":"Recipient&#39;s Bank:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5811,5828],"text":"Recipient&rsquo;s Bank:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"@typescript-eslint/no-confusing-void-expression","severity":2,"message":"Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.","line":173,"column":32,"nodeType":"CallExpression","messageId":"invalidVoidExprArrow","endLine":173,"endColumn":64,"fix":{"range":[6021,6053],"text":"{ setRecipientBank(e.target.value); }"}},{"ruleId":"@typescript-eslint/dot-notation","severity":2,"message":"[\"recipientBank\"] is better written in dot notation.","line":176,"column":57,"nodeType":"Literal","messageId":"useDot","endLine":176,"endColumn":72,"fix":{"range":[6176,6193],"text":".recipientBank"}},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":180,"column":24,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[6308,6359],"text":"\n              Recipient&apos;s account no:\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[6308,6359],"text":"\n              Recipient&lsquo;s account no:\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[6308,6359],"text":"\n              Recipient&#39;s account no:\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[6308,6359],"text":"\n              Recipient&rsquo;s account no:\n            "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"@typescript-eslint/no-confusing-void-expression","severity":2,"message":"Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.","line":187,"column":32,"nodeType":"CallExpression","messageId":"invalidVoidExprArrow","endLine":187,"endColumn":73,"fix":{"range":[6567,6608],"text":"{ setRecipientAccountNumber(e.target.value); }"}},{"ruleId":"@typescript-eslint/dot-notation","severity":2,"message":"[\"recipientAccountNumber\"] is better written in dot notation.","line":191,"column":23,"nodeType":"Literal","messageId":"useDot","endLine":191,"endColumn":47,"fix":{"range":[6752,6778],"text":".recipientAccountNumber"}},{"ruleId":"@typescript-eslint/no-confusing-void-expression","severity":2,"message":"Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.","line":201,"column":32,"nodeType":"CallExpression","messageId":"invalidVoidExprArrow","endLine":201,"endColumn":65,"fix":{"range":[7115,7148],"text":"{ setTransferAmount(e.target.value); }"}},{"ruleId":"@typescript-eslint/dot-notation","severity":2,"message":"[\"transferAmount\"] is better written in dot notation.","line":205,"column":23,"nodeType":"Literal","messageId":"useDot","endLine":205,"endColumn":39,"fix":{"range":[7292,7310],"text":".transferAmount"}},{"ruleId":"@typescript-eslint/no-confusing-void-expression","severity":2,"message":"Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.","line":217,"column":17,"nodeType":"CallExpression","messageId":"invalidVoidExprArrow","endLine":217,"endColumn":47,"fix":{"range":[7736,7766],"text":"{ setdescription(e.target.value); }"}},{"ruleId":"@typescript-eslint/dot-notation","severity":2,"message":"[\"description\"] is better written in dot notation.","line":220,"column":57,"nodeType":"Literal","messageId":"useDot","endLine":220,"endColumn":70,"fix":{"range":[7853,7868],"text":".description"}},{"ruleId":"@typescript-eslint/no-confusing-void-expression","severity":2,"message":"Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.","line":228,"column":32,"nodeType":"CallExpression","messageId":"invalidVoidExprArrow","endLine":228,"endColumn":59,"fix":{"range":[8137,8164],"text":"{ setCurrency(e.target.value); }"}}],"suppressedMessages":[],"errorCount":39,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":11,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from \"react\";\nimport \"../css/PaymentForm.css\";\nimport SwiftCodeTextBox from \"../components/SwiftCodeTextBox\"; // Import the SwiftCodeTextBox component\nimport { isAuthenticated } from \"../utils/auth\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getUserAccountNum } from \"../services/dataRequestService\";\nimport useFormValidationErrors from \"../validation/useFormValidationErrors\";\nimport {\n  getAccountNumberErrors,\n  getDescriptionErrors,\n  getNameErrors,\n  getTransferAmountErrors,\n} from \"../validation/validation\";\n\nfunction CustomerPaymentForm() {\n  const [recipientName, setRecipientName] = useState(\"\");\n  const [recipientBank, setRecipientBank] = useState(\"\");\n  const [recipientAccountNumber, setRecipientAccountNumber] = useState(\"\");\n  const [transferAmount, setTransferAmount] = useState(\"\");\n  const [swiftCode, setSwiftCode] = useState(\"\");\n  const [currency, setCurrency] = useState(\"USD\"); // Example currency\n  const [description, setdescription] = useState(\"\"); // Description of the transaction\n  const [isSwiftCodeValid, setIsSwiftCodeValid] = useState<boolean>(false);\n  const navigate = useNavigate();\n  const alertShown = useRef(false); // Ref to track if the alert has been shown\n\n  // custom hook for input validation\n  const { errors, setFieldError, clearFieldError } = useFormValidationErrors([\n    \"recipientName\",\n    \"recipientBank\",\n    \"recipientAccountNumber\",\n    \"transferAmount\",\n    \"description\",\n  ]);\n\n  useEffect(() => {\n    if (!isAuthenticated() && !alertShown.current) {\n      alert(\"You are not logged in. Please log in to continue.\");\n      alertShown.current = true; // Set the ref to true after showing the alert\n      navigate(\"/login\");\n    }\n  }, [navigate]);\n\n  const handleBackClick = () => {\n    navigate(\"/customer-dashboard\");\n  };\n  const [accountNum, setAccountNum] = useState(\"\");\n\n  async function fetchUserAccountNum() {\n    const AN = await getUserAccountNum();\n    if (AN) setAccountNum(AN);\n  }\n\n  const handleIsValidChange = (valid: boolean) => {\n    setIsSwiftCodeValid(valid);\n  };\n\n  const handlePayClick = async (e: any) => {\n    fetchUserAccountNum();\n    e.preventDefault(); // Prevent the default form submission\n\n    // Input Validation\n    clearFieldError(\"recipientName\"); // Recipient Name\n    const nameErrors = getNameErrors(recipientName);\n    if (nameErrors.length > 0) {\n      setFieldError(\"recipientName\", nameErrors);\n      return;\n    }\n    clearFieldError(\"recipientBank\"); // Recipient Bank\n    const recipientBankErrors = getNameErrors(recipientBank);\n    if (recipientBankErrors.length > 0) {\n      setFieldError(\"recipientBank\", recipientBankErrors);\n      return;\n    }\n    clearFieldError(\"recipientAccountNumber\"); // Recipient Account Number\n    const recipientAccountNumberErrors = getAccountNumberErrors(\n      recipientAccountNumber\n    );\n    if (recipientAccountNumberErrors.length > 0) {\n      setFieldError(\"recipientAccountNumber\", recipientAccountNumberErrors);\n      return;\n    }\n    clearFieldError(\"transferAmount\"); // Transfer Amount\n    const transferAmountErrors = getTransferAmountErrors(transferAmount);\n    if (transferAmountErrors.length > 0) {\n      setFieldError(\"transferAmount\", transferAmountErrors);\n      return;\n    }\n    clearFieldError(\"description\"); // Description\n    const descriptionErrors = getDescriptionErrors(description);\n    if (descriptionErrors.length > 0) {\n      setFieldError(\"description\", descriptionErrors);\n      return;\n    }\n    \n    if (!isSwiftCodeValid)\n     {\n       return;\n     }\n\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('Please log in to make a payment');\n        return;\n      }\n\n      \n\n      const response = await fetch(\n        \"https://localhost:3000/api/transaction/transact\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${token}` // Add this line\n          },\n          body: JSON.stringify({\n            recipientName,\n            recipientBank,\n            recipientAccountNumber,\n            transferAmount,\n            currency,\n            swiftCode,\n            transactionDescription: description,\n            transactionDate: new Date().toISOString(),\n          }),\n        }\n      );\n\n      console.log(\"Server response:\", response); // Log the raw response from the server\n\n      if (response.ok) {\n        const data = await response.json();\n        console.log(\"Response data:\", data); // Log the parsed response data\n        alert(\"Payment Successful!\");\n        navigate(\"/customer-dashboard\");\n      } else {\n        const errorData = await response.json();\n        console.log(\"Error data:\", errorData); // Log the error data\n        alert(`Payment failed: ${errorData.error}`);\n      }\n    } catch (error: any) {\n      console.error(\"Fetch error:\", error); // Log the fetch error\n      alert(`Payment failed: ${error.message}`);\n    }\n  };\n\n  return (\n    <div className=\"page-container\">\n      <div className=\"form-container\">\n        <h1 className=\"form-title\">Payment Form</h1>\n        <form className=\"payment-form\" onSubmit={handlePayClick}>\n          <div className=\"form-group\">\n            <label htmlFor=\"recipient-name\">Recipient's Name:</label>\n            <input\n              className=\"input-field\"\n              type=\"text\"\n              id=\"recipient-name\"\n              value={recipientName}\n              onChange={(e) => setRecipientName(e.target.value)}\n              placeholder=\"Enter Recipient's Name\"\n            />\n            <text className=\"global-error-text\">{errors[\"recipientName\"]}</text>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"recipient-bank\">Recipient's Bank:</label>\n            <input\n              className=\"input-field\"\n              type=\"text\"\n              id=\"recipient-bank\"\n              value={recipientBank}\n              onChange={(e) => setRecipientBank(e.target.value)}\n              placeholder=\"Enter Recipient's Bank\"\n            />\n            <text className=\"global-error-text\">{errors[\"recipientBank\"]}</text>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"recipient-account-no\">\n              Recipient's account no:\n            </label>\n            <input\n              className=\"input-field\"\n              type=\"text\"\n              id=\"recipient-account-no\"\n              value={recipientAccountNumber}\n              onChange={(e) => setRecipientAccountNumber(e.target.value)}\n              placeholder=\"Enter Recipient's Account No\"\n            />\n            <text className=\"global-error-text\">\n              {errors[\"recipientAccountNumber\"]}\n            </text>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"amount-transfer\">Amount to transfer:</label>\n            <input\n              className=\"input-field\"\n              type=\"text\"\n              id=\"amount-transfer\"\n              value={transferAmount}\n              onChange={(e) => setTransferAmount(e.target.value)}\n              placeholder=\"Enter Amount you want to pay\"\n            />\n            <text className=\"global-error-text\">\n              {errors[\"transferAmount\"]}\n            </text>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"description\">Description:</label>\n            <input\n              className=\"input-field\"\n              type=\"text\"\n              id=\"description\"\n              placeholder=\"Enter payment description\"\n              value={description}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                setdescription(e.target.value)\n              }\n            />\n            <text className=\"global-error-text\">{errors[\"description\"]}</text>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"currency\">Currency:</label>\n            <select\n              className=\"input-field\"\n              id=\"currency\"\n              value={currency}\n              onChange={(e) => setCurrency(e.target.value)}\n            >\n                <option value=\"ZAR\">ZAR</option>\n                <option value=\"USD\">USD</option>\n                <option value=\"EUR\">EUR</option>\n                <option value=\"GBP\">GBP</option>\n                <option value=\"JPY\">JPY</option>\n                <option value=\"AUD\">AUD</option>\n                <option value=\"CAD\">CAD</option>\n                <option value=\"CHF\">CHF</option>\n                <option value=\"CNY\">CNY</option>\n                <option value=\"INR\">INR</option>\n                <option value=\"BRL\">BRL</option>\n                <option value=\"MXN\">MXN</option>\n                <option value=\"RUB\">RUB</option>\n                <option value=\"KRW\">KRW</option>\n                <option value=\"SGD\">SGD</option>\n                <option value=\"HKD\">HKD</option>\n                <option value=\"NOK\">NOK</option>\n                <option value=\"SEK\">SEK</option>\n                <option value=\"NZD\">NZD</option>\n                <option value=\"TRY\">TRY</option>\n\n              {/* Add more currencies as needed */}\n            </select>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"swift-code\">Enter SWIFT Code:</label>\n            <SwiftCodeTextBox value={swiftCode} onChange={(data) => {setSwiftCode(data)}} onIsValidChange={handleIsValidChange} />{\" \"}\n            {/* Assuming SwiftCodeTextBox takes a value and onChange prop */}\n          </div>\n          <div className=\"form-buttons\">\n            <button type=\"submit\" className=\"pay-now-button\">\n              PAY Now\n            </button>\n            <button\n              type=\"button\"\n              className=\"cancel-button\"\n              onClick={handleBackClick}\n            >\n              Cancel\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default CustomerPaymentForm;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/nicsmeyer/Documents/VSProjects/APDS7311-POE/client/src/pages/EmployeeDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":21,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":21,"endColumn":27},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":27,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":27,"endColumn":32,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[720,720],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":30,"column":45,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":30,"endColumn":47},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":33,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":33,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[879,885],"text":"token == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[880,885],"text":"(token ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[879,885],"text":"!Boolean(token)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":49,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":49,"endColumn":43},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":50,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":50,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1338,1374],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":51,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":51,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1397,1445],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .transactions on an `any` value.","line":51,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":51,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<Transaction[]>`.","line":52,"column":25,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":52,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .transactions on an `any` value.","line":52,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":52,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":54,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":54,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | undefined`.","line":55,"column":25,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":55,"endColumn":76},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":55,"column":25,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":55,"endColumn":42,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1578,1595],"text":"(Boolean(errorData.message))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":55,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":55,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":65,"column":54,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":65,"endColumn":56},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"string | null\" of template literal expression.","line":73,"column":38,"nodeType":"Identifier","messageId":"invalidType","endLine":73,"endColumn":43},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":81,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":81,"endColumn":36,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2354,2354],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":83,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":83,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":84,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":84,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":91,"column":61,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":91,"endColumn":63},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"string | null\" of template literal expression.","line":99,"column":38,"nodeType":"Identifier","messageId":"invalidType","endLine":99,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":106,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":106,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":107,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":107,"endColumn":29},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":108,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":108,"endColumn":36,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3086,3086],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":110,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":110,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":111,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":111,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":118,"column":35,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":118,"endColumn":37},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":128,"column":43,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":128,"endColumn":45},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":136,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":136,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3666,3671],"text":"error != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3666,3671],"text":"error ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3666,3671],"text":"Boolean(error)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":188,"column":25,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":188,"endColumn":62},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":195,"column":25,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":195,"endColumn":69}],"suppressedMessages":[],"errorCount":31,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\nimport \"../css/EmployeeDashboard.css\";\n\ninterface Transaction {\n  _id: string;\n  senderLookupHash: string;\n  recipientLookupHash: string;\n  recipientName: string;\n  recipientBank: string;\n  transferAmount: {\n    $numberDecimal: string;\n  };\n  currency: string;\n  swiftCode: string;\n  transactionDescription: string;\n  \n  transactionDate: Date;\n  approvalStatus: 'approved' | 'pending' | 'denied' | 'completed';\n}\n\nfunction EmployeeDashboard() {\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);  // Add error state\n\n  useEffect(() => {\n    fetchPendingTransactions();\n  }, []);\n\n  const fetchPendingTransactions = async () => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        setError(\"No authentication token found\");\n        setLoading(false);\n        return;\n      }\n      const response = await fetch(\n        \"https://localhost:3000/api/employee/getPendingTransactions\",\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n      \n      if (response.ok) {\n        const data = await response.json();\n        console.log(\"Received data:\", data);  // Debug log\n        console.log(\"Transactions:\", data.transactions);\n        setTransactions(data.transactions);\n      } else {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to fetch transactions\");\n      }\n    } catch (error) {\n      console.error(\"Error in fetchPendingTransactions:\", error);\n      setError(error instanceof Error ? error.message : \"An error occurred\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleVerify = async (transactionId: string) => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      const response = await fetch(\n        `https://localhost:3000/api/employee/verifyTransaction/${transactionId}`,\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n\n      if (response.ok) {\n        // Refresh the transactions list\n        fetchPendingTransactions();\n      } else {\n        const error = await response.json();\n        alert(error.message);\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n\n  const handleSubmitToSwift = async (transactionId: string) => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      const response = await fetch(\n        `https://localhost:3000/api/employee/submitToSwift/${transactionId}`,\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n\n      if (response.ok) {\n        const result = await response.json();\n        alert(result.message);\n        fetchPendingTransactions();\n      } else {\n        const error = await response.json();\n        alert(error.message);\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n\n  const formatDate = (date: Date) => {\n    return new Date(date).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getStatusClass = (status: string) => {\n    return `status-${status.toLowerCase()}`;\n  };\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error) {\n    return <div className=\"error-message\">Error: {error}</div>;\n  }\n\n  return (\n    <div className=\"employee-dashboard-container\">\n      <div className=\"dashboard-header\">\n        <h1>Employee Dashboard</h1>\n      </div>\n      \n      <div className=\"transactions-container\">\n        {transactions.map((transaction) => (\n          <div key={transaction._id} className=\"transaction-card\">\n            <div className=\"transaction-header\">\n              <h3>Transaction #{transaction._id.slice(-6)}</h3>\n              <span className={`transaction-status ${getStatusClass(transaction.approvalStatus)}`}>\n                {transaction.approvalStatus.toUpperCase()}\n              </span>\n            </div>\n            \n            <div className=\"transaction-details\">\n              <div className=\"detail-item\">\n                <span className=\"detail-label\">Date</span>\n                <span className=\"detail-value\">{formatDate(transaction.transactionDate)}</span>\n              </div>\n              <div className=\"detail-item\">\n                <span className=\"detail-label\">Amount</span>\n                <span className=\"detail-value\">\n                  {transaction.currency} {parseFloat(transaction.transferAmount.$numberDecimal).toFixed(2)}\n                </span>\n              </div>\n              <div className=\"detail-item\">\n                <span className=\"detail-label\">Recipient</span>\n                <span className=\"detail-value\">{transaction.recipientName}</span>\n              </div>\n              <div className=\"detail-item\">\n                <span className=\"detail-label\">Recipient Bank</span>\n                <span className=\"detail-value\">{transaction.recipientBank}</span>\n              </div>\n              <div className=\"detail-item\">\n                <span className=\"detail-label\">SWIFT Code</span>\n                <span className=\"detail-value\">{transaction.swiftCode}</span>\n              </div>\n              <div className=\"detail-item\">\n                <span className=\"detail-label\">Description</span>\n                <span className=\"detail-value\">{transaction.transactionDescription}</span>\n              </div>\n            </div>\n\n            <div className=\"transaction-actions\">\n              <button\n                className=\"action-button\"\n                onClick={() => handleVerify(transaction._id)}\n                disabled={transaction.approvalStatus !== \"pending\"}\n              >\n                Verify Transaction\n              </button>\n              <button\n                className=\"action-button\"\n                onClick={() => handleSubmitToSwift(transaction._id)}\n                disabled={transaction.approvalStatus !== \"approved\"}\n              >\n                Submit to SWIFT\n              </button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default EmployeeDashboard;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/nicsmeyer/Documents/VSProjects/APDS7311-POE/client/src/pages/EmployeeLogin.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":4,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":4,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":13,"column":65,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":13,"endColumn":67},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":20,"column":65,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":20,"endColumn":67},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":23,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":23,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[564,623],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":33,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":33,"endColumn":45},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":34,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":34,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[932,952],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":35,"column":39,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":35,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .token on an `any` value.","line":35,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":35,"endColumn":51},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":36,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":36,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1014,1079],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":38,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":38,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1150,1200],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":41,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":41,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":42,"column":25,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":42,"endColumn":56},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":42,"column":25,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":42,"endColumn":38,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1373,1386],"text":"(Boolean(error.message))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":42,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":42,"endColumn":38},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":57,"column":26,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":57,"endColumn":37}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport '../css/LoginAndRegister.css';\n\nfunction EmployeeLogin() {\n  const [data, setData] = useState({\n    username: '',\n    password: '',\n  });\n\n  const [errorMessage, setErrorMessage] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setData({\n      ...data,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const loginUser = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    try {\n      console.log('Employee login attempt, data passed: ', data);\n      const response = await fetch('https://localhost:3000/api/employee/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        console.log(result);\n        localStorage.setItem('token', result.token);\n        console.log(\"Token after login:\", localStorage.getItem(\"token\"));\n        setSuccessMessage('Employee logged in successfully');\n        console.log(\"Redirecting to /employee-dashboard\");\n        window.location.href = \"/employee-dashboard\"; // Redirect to employee dashboard\n      } else {\n        const error = await response.json();\n        setErrorMessage(error.message || 'Login failed');\n      }\n    } catch (error) {\n      console.error('An error occurred, please try again later.', error);\n      setErrorMessage('An error occurred, please try again later.');\n    }\n  };\n\n  return (\n    <div className=\"login-container\">\n      <div className=\"login-image\">\n      </div>\n\n      <div className=\"login-form\">\n        <div className=\"form-container\">\n          <form onSubmit={loginUser}>\n            <div className=\"form-group\">\n              <label>Username</label>\n              <input\n                type=\"text\"\n                name=\"username\"\n                placeholder=\"Your Username\"\n                autoComplete=\"username\"\n                value={data.username}\n                onChange={handleChange}\n                className=\"input-field login-input-field\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label>Password</label>\n              <input\n                type=\"password\"\n                name=\"password\"\n                autoComplete=\"current-password\"\n                value={data.password}\n                onChange={handleChange}\n                className=\"input-field login-input-field\"\n              />\n            </div>\n            <button type=\"submit\">Login</button>\n          </form>\n          {errorMessage && <p className=\"error\">{errorMessage}</p>}\n          {successMessage && <p className=\"success\">{successMessage}</p>}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default EmployeeLogin;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/nicsmeyer/Documents/VSProjects/APDS7311-POE/client/src/pages/Home.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":4,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":4,"endColumn":29},{"ruleId":"no-irregular-whitespace","severity":2,"message":"Irregular whitespace not allowed.","line":24,"column":2,"nodeType":"Program","messageId":"noIrregularWhitespace","endLine":24,"endColumn":5},{"ruleId":"no-irregular-whitespace","severity":2,"message":"Irregular whitespace not allowed.","line":25,"column":1,"nodeType":"Program","messageId":"noIrregularWhitespace","endLine":25,"endColumn":3}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import \"../css/Home.css\";\nimport businessMan from \"../assets/Images/businessman.webp\"; // Import your image\n\nexport default function Home() {\n  return (\n    <div className=\"overall-container\">\n      <div className=\"home-container\">\n        <div className=\"text-container\">\n          <h1 className=\"h1-heading\">\n            Unlock your full <br />\n            <span className=\"potential\">POTENTIAL</span> <br />\n            with E-Z Banking.\n          </h1>\n          <p className=\"body-text\">\n            E-Z Banking is a free, easy-to-use, secure, and reliable online banking\n            platform that allows you to manage your finances from the comfort of\n            your home.\n          </p>\n        </div>\n        <div className=\"image-container\">\n    <img src={businessMan} alt=\"Business Man\" className=\"business-image\" />\n  </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/nicsmeyer/Documents/VSProjects/APDS7311-POE/client/src/pages/Login.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":4,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":4,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":14,"column":65,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":14,"endColumn":67},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":21,"column":69,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":21,"endColumn":71},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":24,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":24,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[602,657],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":35,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":35,"endColumn":45},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":36,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":36,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[969,989],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":38,"column":39,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":38,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .token on an `any` value.","line":38,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":38,"endColumn":51},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":41,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":41,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1111,1161],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":44,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":44,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":45,"column":25,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":45,"endColumn":56},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":45,"column":25,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":45,"endColumn":38,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1334,1347],"text":"(Boolean(error.message))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":45,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":45,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":53,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":53,"endColumn":41},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":54,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":54,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1600,1646],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":64,"column":26,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":64,"endColumn":37}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport \"../css/LoginAndRegister.css\";\n\nexport default function Login() {\n  const [data, setData] = useState({\n    username: \"\",\n    accountNumber: \"\",\n    password: \"\",\n  });\n\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setData({\n      ...data,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const loginUser = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    try {\n      console.log(\"User login attempt, data passed: \", data);\n      const response = await fetch(\"https://localhost:3000/api/user/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n      \n\n      if (response.ok) {\n        const result = await response.json();\n        console.log(result);\n\n        localStorage.setItem(\"token\", result.token);\n\n        setSuccessMessage(\"User logged in successfully\");\n        console.log(\"Redirecting to /customer-dashboard\");\n        window.location.href = \"/customer-dashboard\"; // Redirect to customer dashboard\n      } else {\n        const error = await response.json();\n        setErrorMessage(error.message || \"Login failed\");\n      }\n    } catch (error) {\n      console.error(\"An error occurred, please try again later.\", error);\n      setErrorMessage(\"An error occurred, please try again later.\");\n    }\n  };\n\n  const handleEmployeeLoginClick = () => {\n    console.log(\"Redirecting to /employee-login\");\n    window.location.href = \"/employee-login\"; // Redirect to employee login\n  };\n\n  return (\n    <div className=\"login-container\">\n      <div className=\"login-image\"></div>\n\n      <div className=\"login-form\">\n        <div className=\"form-container\">\n          <form onSubmit={loginUser}>\n            <div className=\"form-group\">\n              <label>Username</label>\n              <input\n                type=\"text\"\n                name=\"username\"\n                placeholder=\"Your Username\"\n                value={data.username}\n                onChange={handleChange}\n                className=\"input-field login-input-field\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label>Account Number</label>\n              <input\n                type=\"text\"\n                name=\"accountNumber\"\n                placeholder=\"Your Account Number\"\n                value={data.accountNumber}\n                onChange={handleChange}\n                className=\"input-field login-input-field\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label>Password</label>\n              <input\n                type=\"password\"\n                name=\"password\"\n                value={data.password}\n                onChange={handleChange}\n                className=\"input-field login-input-field\"\n              />\n            </div>\n            <button type=\"submit\">Login</button>\n          </form>\n          {errorMessage && <p className=\"error\">{errorMessage}</p>}\n          {successMessage && <p className=\"success\">{successMessage}</p>}\n          <button\n            className=\"employeeLogin-button\"\n            type=\"button\"\n            onClick={handleEmployeeLoginClick}\n          >\n            Employee Login\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/nicsmeyer/Documents/VSProjects/APDS7311-POE/client/src/pages/Register.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":13,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":13,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":36,"column":65,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":36,"endColumn":67},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":44,"column":68,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":44,"endColumn":70},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":89,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":89,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2602,2660],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":99,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":99,"endColumn":45},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":100,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":100,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2968,2988],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":102,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":102,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3057,3094],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":108,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":108,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":109,"column":25,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":109,"endColumn":63},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":109,"column":25,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":109,"endColumn":38,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3329,3342],"text":"(Boolean(error.message))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":109,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":109,"endColumn":38},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":123,"column":26,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":123,"endColumn":40},{"ruleId":"@typescript-eslint/dot-notation","severity":2,"message":"[\"name\"] is better written in dot notation.","line":134,"column":59,"nodeType":"Literal","messageId":"useDot","endLine":134,"endColumn":65,"fix":{"range":[4150,4158],"text":".name"}},{"ruleId":"@typescript-eslint/dot-notation","severity":2,"message":"[\"username\"] is better written in dot notation.","line":146,"column":59,"nodeType":"Literal","messageId":"useDot","endLine":146,"endColumn":69,"fix":{"range":[4582,4594],"text":".username"}},{"ruleId":"@typescript-eslint/dot-notation","severity":2,"message":"[\"idNumber\"] is better written in dot notation.","line":159,"column":61,"nodeType":"Literal","messageId":"useDot","endLine":159,"endColumn":71,"fix":{"range":[5101,5113],"text":".idNumber"}},{"ruleId":"@typescript-eslint/dot-notation","severity":2,"message":"[\"accountNumber\"] is better written in dot notation.","line":172,"column":27,"nodeType":"Literal","messageId":"useDot","endLine":172,"endColumn":42,"fix":{"range":[5602,5619],"text":".accountNumber"}},{"ruleId":"@typescript-eslint/dot-notation","severity":2,"message":"[\"password\"] is better written in dot notation.","line":186,"column":61,"nodeType":"Literal","messageId":"useDot","endLine":186,"endColumn":71,"fix":{"range":[6113,6125],"text":".password"}},{"ruleId":"@typescript-eslint/dot-notation","severity":2,"message":"[\"confirmPassword\"] is better written in dot notation.","line":198,"column":27,"nodeType":"Literal","messageId":"useDot","endLine":198,"endColumn":44,"fix":{"range":[6572,6591],"text":".confirmPassword"}}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport \"../css/LoginAndRegister.css\"; // Using the same CSS for both login and register\nimport useFormValidationErrors from \"../validation/useFormValidationErrors\";\nimport {\n  getAccountNumberErrors,\n  getConfirmPasswordErrors,\n  getIdNumberErrors,\n  getNameErrors,\n  getPasswordErrors,\n  getUsernameErrors,\n} from \"../validation/validation\";\n\nexport default function Register() {\n  const [data, setData] = useState({\n    name: \"\",\n    username: \"\",\n    idNumber: \"\",\n    accountNumber: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n\n  // custom hook for error validation\n  const { errors, setFieldError, clearFieldError } = useFormValidationErrors([\n    \"name\",\n    \"username\",\n    \"idNumber\",\n    \"accountNumber\",\n    \"password\",\n    \"confirmPassword\",\n  ]);\n\n  const [responseMessage, setResponseMessage] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setData({\n      ...data,\n      [name]: value,\n    });\n  };\n\n  const registerUser = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    // Validation\n    clearFieldError(\"name\"); // Full Name\n    const nameErrors = getNameErrors(data.name);\n    if (nameErrors.length > 0) {\n      setFieldError(\"name\", nameErrors);\n      return;\n    }\n    clearFieldError(\"username\"); // Username\n    const usernameErrors = getUsernameErrors(data.username);\n    if (usernameErrors.length > 0) {\n      setFieldError(\"username\", usernameErrors);\n      return;\n    }\n    clearFieldError(\"idNumber\"); // ID Number\n    const idNumberErrors = getIdNumberErrors(data.idNumber);\n    if (idNumberErrors.length > 0) {\n      setFieldError(\"idNumber\", idNumberErrors);\n      return;\n    }\n    clearFieldError(\"accountNumber\"); // Account Number\n    const accountNumberErrors = getAccountNumberErrors(data.accountNumber);\n    if (accountNumberErrors.length > 0) {\n      setFieldError(\"accountNumber\", accountNumberErrors);\n      return;\n    }\n    clearFieldError(\"password\"); // Password\n    const passwordErrors = getPasswordErrors(data.password);\n    if (passwordErrors.length > 0) {\n      setFieldError(\"password\", passwordErrors);\n      return;\n    }\n    clearFieldError(\"confirmPassword\"); // Confirm Password\n    const confirmPasswordErrors = getConfirmPasswordErrors(\n      data.password,\n      data.confirmPassword\n    );\n    if (confirmPasswordErrors.length > 0) {\n      setFieldError(\"confirmPassword\", confirmPasswordErrors);\n      return;\n    }\n\n    try {\n      console.log(\"User register attempt, data passed: \", data);\n      const response = await fetch(\"https://localhost:3000/api/user/register\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        console.log(result);\n        setResponseMessage(\"User registered successfully\");\n        console.log(\"Redirecting to /login\");\n        // wait a second before redirect\n        setTimeout(() => {\n          window.location.href = \"/login\"; // Redirect to login\n        }, 2000);\n      } else {\n        const error = await response.json();\n        setErrorMessage(error.message || \"Registration failed\");\n      }\n    } catch (error) {\n      console.error(\"An error occurred, please try again later.\", error);\n      setErrorMessage(\"An error occurred, please try again later.\");\n    }\n  };\n\n  return (\n    <div className=\"login-container\">\n      <div className=\"login-image\"></div>\n\n      <div className=\"login-form\">\n        <div className=\"form-container\">\n          <form onSubmit={registerUser}>\n            <div className=\"form-group\">\n              <label>Full Name</label>\n              <input\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"John Smith\"\n                value={data.name}\n                onChange={handleChange}\n                className=\"input-field\"\n              />\n              <text className=\"global-error-text\">{errors[\"name\"]}</text>\n            </div>\n            <div className=\"form-group\">\n              <label>Username</label>\n              <input\n                type=\"text\"\n                name=\"username\"\n                placeholder=\"Your Username\"\n                value={data.username}\n                onChange={handleChange}\n                className=\"input-field\"\n              />\n              <text className=\"global-error-text\">{errors[\"username\"]}</text>\n            </div>\n            <div className=\"form-group-horizontal\">\n              <div className=\"form-group\">\n                <label>ID Number</label>\n                <input\n                  type=\"text\"\n                  name=\"idNumber\"\n                  placeholder=\"13 Digit ZA ID Number\"\n                  value={data.idNumber}\n                  onChange={handleChange}\n                  className=\"input-field\"\n                />\n                <text className=\"global-error-text\">{errors[\"idNumber\"]}</text>\n              </div>\n              <div className=\"form-group\">\n                <label>Account Number</label>\n                <input\n                  type=\"text\"\n                  name=\"accountNumber\"\n                  placeholder=\"Your Account Number\"\n                  value={data.accountNumber}\n                  onChange={handleChange}\n                  className=\"input-field\"\n                />\n                <text className=\"global-error-text\">\n                  {errors[\"accountNumber\"]}\n                </text>\n              </div>\n            </div>\n            <div className=\"form-group-horizontal\">\n              <div className=\"form-group\">\n                <label>Password</label>\n                <input\n                  type=\"password\"\n                  name=\"password\"\n                  value={data.password}\n                  onChange={handleChange}\n                  className=\"input-field\"\n                />\n                <text className=\"global-error-text\">{errors[\"password\"]}</text>\n              </div>\n              <div className=\"form-group\">\n                <label>Confirm Password</label>\n                <input\n                  type=\"password\"\n                  name=\"confirmPassword\"\n                  value={data.confirmPassword}\n                  onChange={handleChange}\n                  className=\"input-field\"\n                />\n                <text className=\"global-error-text\">\n                  {errors[\"confirmPassword\"]}\n                </text>\n              </div>\n            </div>\n            <button type=\"submit\">Register</button>\n          </form>\n          {responseMessage && <p className=\"success\">{responseMessage}</p>}\n          {errorMessage && <p className=\"error\">{errorMessage}</p>}\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/nicsmeyer/Documents/VSProjects/APDS7311-POE/client/src/pages/Transactions.tsx","messages":[{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"\"approved\" is overridden by string in this union type.","line":7,"column":11,"nodeType":"TSLiteralType","messageId":"literalOverridden","endLine":7,"endColumn":21},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"\"pending\" is overridden by string in this union type.","line":7,"column":24,"nodeType":"TSLiteralType","messageId":"literalOverridden","endLine":7,"endColumn":33},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"\"denied\" is overridden by string in this union type.","line":7,"column":36,"nodeType":"TSLiteralType","messageId":"literalOverridden","endLine":7,"endColumn":44},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"\"completed\" is overridden by string in this union type.","line":7,"column":47,"nodeType":"TSLiteralType","messageId":"literalOverridden","endLine":7,"endColumn":58},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":12,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":12,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":33,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":33,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":37,"column":34,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":37,"endColumn":36},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":41,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":41,"endColumn":34},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":68,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":68,"endColumn":25,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1809,1809],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":71,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":71,"endColumn":40},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":76,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":76,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1987,1993],"text":"token == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1988,1993],"text":"(token ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1987,1993],"text":"!Boolean(token)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"number\" of template literal expression.","line":93,"column":48,"nodeType":"MemberExpression","messageId":"invalidType","endLine":93,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":96,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":96,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .transactionList on an `any` value.","line":97,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":97,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<Transaction[]>`.","line":98,"column":25,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":98,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .transactionList on an `any` value.","line":98,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":98,"endColumn":45},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":114,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":114,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3086,3091],"text":"error != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3086,3091],"text":"error ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3086,3091],"text":"Boolean(error)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":125,"column":55,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":125,"endColumn":57}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport '../css/Transaction.css';\nimport { isAuthenticated } from \"../utils/auth\";\n\ninterface TransactionStatusProps {\n  status: 'approved' | 'pending' | 'denied' | 'completed' | string;\n}\n\n\nconst TransactionStatus: React.FC<TransactionStatusProps> = ({ status }) => {\n  const getStatusColor = () => {\n    switch (status) {\n      case 'completed': return 'blue';\n      case 'approved': return 'green';\n      case 'pending': return 'orange';\n      case 'denied': return 'red';\n      default: return 'gray';\n    }\n  };\n\n  return (\n    <span style={{ \n      color: getStatusColor(), \n      fontWeight: 'bold',\n      textTransform: 'capitalize'\n    }}>\n      {status}\n    </span>\n  );\n};\n\nfunction Transactions() {\n  const navigate = useNavigate();\n  const alertShown = useRef(false);\n\n  const handleMainMenuClick = () => {\n    navigate(\"/customer-dashboard\");\n  };\n\n  const handleLogOutClick = () => {\n    localStorage.removeItem('token');\n    navigate(\"/login\");\n  };\n\n  useEffect(() => {\n    if (!isAuthenticated() && !alertShown.current) {\n      alert(\"You are not logged in. Please log in to continue.\");\n      alertShown.current = true; // Set the ref to true after showing the alert\n      navigate(\"/login\");\n    }\n  }, [navigate]);\n  \n  interface Transaction {\n    _id: string;\n    senderLookupHash: string;\n    transactionDate: string;\n    transactionDescription: string;\n    transferAmount: { $numberDecimal: string };\n    approvalStatus: 'approved' | 'pending' | 'denied' | 'completed';\n  }\n\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchTransactions();\n  }, []);\n\n  const fetchTransactions = async () => {\n    setLoading(true);\n    setError(null);\n    const token = localStorage.getItem('token');\n    \n    if (!token) {\n      setError(\"No authentication token found. Please log in again.\");\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const response = await fetch('https://localhost:3000/api/transaction/getTransactions', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);\n      }\n\n      const data = await response.json();\n      if (Array.isArray(data.transactionList)) {\n        setTransactions(data.transactionList);\n      } else {\n        throw new Error(\"Received data is not in the expected format\");\n      }\n    } catch (error) {\n      console.error('Error fetching transactions:', error);\n      setError(`Failed to fetch transactions: ${error instanceof Error ? error.message : String(error)}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n\n  return (\n    <div className=\"dashboard-container\">\n      {/* Side Navigation Bar */}\n      <div className=\"side-nav\">\n        <button className=\"nav-button\" onClick={handleMainMenuClick}>\n          Main Menu\n        </button>\n        <button className=\"nav-button\" onClick={() => {}}>\n          Transactions\n        </button>\n        <button className=\"nav-button\" onClick={handleLogOutClick}>\n          Log Out\n        </button>\n      </div>\n\n      {/* Main Dashboard Content */}\n      <div className=\"main-content\">\n        <div className=\"payment-receipts\">\n          <h1>Transactions</h1>\n          {transactions.length > 0 ? (\n            transactions.map((transaction, index) => (\n              <div className=\"Transaction-details-box\" key={index}>\n                <div className=\"receipt-item\">\n                  <div className=\"transaction-header\">\n                    <div className=\"transaction-date\">\n                      {new Date(transaction.transactionDate).toLocaleString('en-US', {\n                        year: 'numeric',\n                        month: 'long',\n                        day: 'numeric',\n                        hour: '2-digit',\n                        minute: '2-digit'\n                      })}\n                    </div>\n                    <TransactionStatus status={transaction.approvalStatus} />\n                  </div>\n                  \n                  <div className=\"transaction-details\">\n                    <div className=\"detail-item\">\n                      <span className=\"detail-label\">Description</span>\n                      <span className=\"detail-value\">{transaction.transactionDescription}</span>\n                    </div>\n                    <div className=\"detail-item\">\n                      <span className=\"detail-label\">Amount</span>\n                      <span className=\"detail-value transaction-amount\">\n                        ${parseFloat(transaction.transferAmount.$numberDecimal).toFixed(2)}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))\n          ) : (\n            <p>No transactions found.</p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Transactions;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/nicsmeyer/Documents/VSProjects/APDS7311-POE/client/src/services/dataRequestService.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":1,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1,"endColumn":34},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"string | null\" of template literal expression.","line":10,"column":38,"nodeType":"Identifier","messageId":"invalidType","endLine":10,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":17,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":17,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any` typed value.","line":18,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":18,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":18,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":18,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":20,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":20,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | undefined`.","line":21,"column":25,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":21,"endColumn":68},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":21,"column":25,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":21,"endColumn":38,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[766,779],"text":"(Boolean(error.message))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":21,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":21,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[840,843],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[840,843],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":24,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":24,"endColumn":62},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":28,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":28,"endColumn":40},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"string | null\" of template literal expression.","line":37,"column":38,"nodeType":"Identifier","messageId":"invalidType","endLine":37,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":44,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":44,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any` typed value.","line":45,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":45,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .accountNumber on an `any` value.","line":45,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":45,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":47,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":47,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | undefined`.","line":48,"column":25,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":48,"endColumn":73},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":48,"column":25,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":48,"endColumn":38,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1707,1720],"text":"(Boolean(error.message))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":48,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":48,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1786,1789],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1786,1789],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":51,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":51,"endColumn":67},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":55,"column":10,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":55,"endColumn":36},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":58,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":58,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1984,1990],"text":"token == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1985,1990],"text":"(token ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1984,1990],"text":"!Boolean(token)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":69,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":69,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any` typed value.","line":70,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":70,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .transactionList on an `any` value.","line":70,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":70,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":72,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":72,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | undefined`.","line":73,"column":25,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":73,"endColumn":68},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":73,"column":25,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":73,"endColumn":38,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2510,2523],"text":"(Boolean(error.message))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":73,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":73,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2584,2587],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2584,2587],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":76,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":76,"endColumn":62},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":80,"column":10,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":80,"endColumn":35},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":83,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":83,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2778,2784],"text":"token == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2779,2784],"text":"(token ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2778,2784],"text":"!Boolean(token)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":94,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":94,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any` typed value.","line":95,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":95,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .balance on an `any` value.","line":95,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":95,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":97,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":97,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | undefined`.","line":98,"column":25,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":98,"endColumn":64},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":98,"column":25,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":98,"endColumn":38,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3252,3265],"text":"(Boolean(error.message))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":98,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":98,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":100,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3322,3325],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3322,3325],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":101,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":101,"endColumn":58}],"suppressedMessages":[],"errorCount":44,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export async function getUserName() {\n    try {\n      // Retrieve the token from localStorage (if stored there)\n      const token = localStorage.getItem('token');\n      \n      // Send request to server to fetch the user's name\n      const response = await fetch('https://localhost:3000/api/user/getUserName', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`, // Send the JWT token in the Authorization header\n          'Content-Type': 'application/json',\n        },\n      });\n  \n      // Check if request was successful\n      if (response.ok) {\n        const result = await response.json();\n        return result.name; // Return the username\n      } else {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to fetch username');\n      }\n    } catch (error: any) {\n      console.error('Error fetching username:', error.message);\n    }\n  }\n  \nexport async function getUserAccountNum() {\n    try {\n      // Retrieve the token from localStorage (if stored there)\n      const token = localStorage.getItem('token');\n      \n      // Send request to server to fetch the user's name\n      const response = await fetch('https://localhost:3000/api/user/getaccountNum', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`, // Send the JWT token in the Authorization header\n          'Content-Type': 'application/json',\n        },\n      });\n  \n      // Check if request was successful\n      if (response.ok) {\n        const result = await response.json();\n        return result.accountNumber; // Return the username\n      } else {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to fetch accountNumber');\n      }\n    } catch (error: any) {\n      console.error('Error fetching accountNumber:', error.message);\n    }\n  }\n\n  export async function getPayments() {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) throw new Error('No token found');\n  \n      const response = await fetch('https://localhost:3000/api/transaction/getPayments', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n  \n      if (response.ok) {\n        const result = await response.json();\n        return result.transactionList;  // Returns the list of transactions\n      } else {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to fetch payments');\n      }\n    } catch (error: any) {\n      console.error('Error fetching payments:', error.message);\n    }\n  }\n  \n  export async function getBalance() {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) throw new Error('No token found');\n  \n      const response = await fetch('https://localhost:3000/api/user/getBalance', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n  \n      if (response.ok) {\n        const result = await response.json();\n        return result.balance; \n      } else {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to fetch data');\n      }\n    } catch (error: any) {\n      console.error('Error fetching data:', error.message);\n    }\n  }\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/nicsmeyer/Documents/VSProjects/APDS7311-POE/client/src/utils/auth.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":7,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":7,"endColumn":32},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":9,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":9,"endColumn":13,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[170,176],"text":"token == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[171,176],"text":"(token ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[170,176],"text":"!Boolean(token)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":23,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":23,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[409,428],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {jwtDecode} from \"jwt-decode\"\n\ninterface DecodedToken {\n  exp: number;\n}\n\nexport function isAuthenticated() {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    return false;\n  }\n\n  try{\n    const decoded: DecodedToken = jwtDecode(token);\n    const currentTime = Date.now() / 1000;\n\n    if (decoded.exp < currentTime) {\n      return false;\n    }\n\n    return true;\n  } catch(error){\n    console.log(error);\n    return false;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/nicsmeyer/Documents/VSProjects/APDS7311-POE/client/src/utils/hashHelper.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":6,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":6,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[177,192],"text":"ENCRYPTION_KEY == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[178,192],"text":"(ENCRYPTION_KEY ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[177,192],"text":"!Boolean(ENCRYPTION_KEY)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import crypto from 'crypto';\n\nexport const createLookupHash = (accountNumber: string): string => {\n    const ENCRYPTION_KEY = process.env.REACT_APP_ENCRYPTION_KEY;\n    \n    if (!ENCRYPTION_KEY) {\n        throw new Error('REACT_APP_ENCRYPTION_KEY environment variable is not set');\n    }\n\n    // Ensure accountNumber is a string and trim any whitespace\n    const normalizedAccountNumber = String(accountNumber).trim();\n    \n    return crypto\n        .createHash('sha256')\n        .update(normalizedAccountNumber + ENCRYPTION_KEY)\n        .digest('hex');\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/nicsmeyer/Documents/VSProjects/APDS7311-POE/client/src/validation/useFormValidationErrors.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":3,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":3,"endColumn":33},{"ruleId":"@typescript-eslint/consistent-indexed-object-style","severity":2,"message":"A record is preferred over an index signature.","line":5,"column":40,"nodeType":"TSTypeLiteral","messageId":"preferRecord","endLine":5,"endColumn":67,"fix":{"range":[205,232],"text":"Record<string, string[]>"}},{"ruleId":"@typescript-eslint/prefer-reduce-type-parameter","severity":2,"message":"Unnecessary cast: Array#reduce accepts a type parameter for the default value.","line":9,"column":8,"nodeType":"TSAsExpression","messageId":"preferTypeParameter","endLine":9,"endColumn":41,"fix":{"range":[252,352],"text":"<{ [key: string]: string[] }>((acc, field) => {\n      acc[field] = [];\n      return acc;\n    }, {}"}},{"ruleId":"@typescript-eslint/consistent-indexed-object-style","severity":2,"message":"A record is preferred over an index signature.","line":9,"column":14,"nodeType":"TSTypeLiteral","messageId":"preferRecord","endLine":9,"endColumn":41,"fix":{"range":[325,352],"text":"Record<string, string[]>"}},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":13,"column":70,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":13,"endColumn":72},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":21,"column":47,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":21,"endColumn":49}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import { useState } from \"react\";\n\nfunction useFormValidationErrors(fields: string[]) {\n  // Initialize the errors object state dynamically based on the fields array\n  const [errors, setErrors] = useState<{ [key: string]: string[] }>(\n    fields.reduce((acc, field) => {\n      acc[field] = [];\n      return acc;\n    }, {} as { [key: string]: string[] })\n  );\n\n  // Function to set (overwrite) error messages for a specific field\n  const setFieldError = (fieldName: string, errorMessages: string[]) => {\n    setErrors((prevErrors) => ({\n      ...prevErrors,\n      [fieldName]: errorMessages,\n    }));\n  };\n\n  // Function to clear error messages for a specific field\n  const clearFieldError = (fieldName: string) => {\n    setErrors((prevErrors) => ({\n      ...prevErrors,\n      [fieldName]: [],\n    }));\n  };\n\n  // Return the current errors and the functions to modify them\n  return {\n    errors,\n    setFieldError,\n    clearFieldError,\n  };\n}\n\nexport default useFormValidationErrors;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/nicsmeyer/Documents/VSProjects/APDS7311-POE/client/src/validation/validation.ts","messages":[{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":3,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":3,"endColumn":29,"fix":{"range":[58,61],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":21,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":21,"endColumn":29,"fix":{"range":[500,503],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":36,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":36,"endColumn":29,"fix":{"range":[791,794],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":56,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":56,"endColumn":29,"fix":{"range":[1297,1300],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":80,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":80,"endColumn":29,"fix":{"range":[1874,1877],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":98,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":98,"endColumn":29,"fix":{"range":[2486,2489],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":116,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":116,"endColumn":29,"fix":{"range":[2899,2902],"text":"let"}},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":2,"message":"Missing return type on function.","line":133,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":133,"endColumn":37},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":135,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":135,"endColumn":29,"fix":{"range":[3359,3362],"text":"let"}},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":152,"column":5,"nodeType":"TemplateElement","messageId":"unnecessaryEscape","endLine":152,"endColumn":6,"suggestions":[{"messageId":"removeEscape","fix":{"range":[3757,3758],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[3757,3757],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":152,"column":13,"nodeType":"TemplateElement","messageId":"unnecessaryEscape","endLine":152,"endColumn":14,"suggestions":[{"messageId":"removeEscape","fix":{"range":[3765,3766],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[3765,3765],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":152,"column":17,"nodeType":"TemplateElement","messageId":"unnecessaryEscape","endLine":152,"endColumn":18,"suggestions":[{"messageId":"removeEscape","fix":{"range":[3769,3770],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[3769,3769],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":152,"column":25,"nodeType":"TemplateElement","messageId":"unnecessaryEscape","endLine":152,"endColumn":26,"suggestions":[{"messageId":"removeEscape","fix":{"range":[3777,3778],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[3777,3777],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":152,"column":29,"nodeType":"TemplateElement","messageId":"unnecessaryEscape","endLine":152,"endColumn":30,"suggestions":[{"messageId":"removeEscape","fix":{"range":[3781,3782],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[3781,3781],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":152,"column":37,"nodeType":"TemplateElement","messageId":"unnecessaryEscape","endLine":152,"endColumn":38,"suggestions":[{"messageId":"removeEscape","fix":{"range":[3789,3790],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[3789,3789],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":152,"column":41,"nodeType":"TemplateElement","messageId":"unnecessaryEscape","endLine":152,"endColumn":42,"suggestions":[{"messageId":"removeEscape","fix":{"range":[3793,3794],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[3793,3793],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":152,"column":49,"nodeType":"TemplateElement","messageId":"unnecessaryEscape","endLine":152,"endColumn":50,"suggestions":[{"messageId":"removeEscape","fix":{"range":[3801,3802],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[3801,3801],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":152,"column":53,"nodeType":"TemplateElement","messageId":"unnecessaryEscape","endLine":152,"endColumn":54,"suggestions":[{"messageId":"removeEscape","fix":{"range":[3805,3806],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[3805,3805],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":152,"column":59,"nodeType":"TemplateElement","messageId":"unnecessaryEscape","endLine":152,"endColumn":60,"suggestions":[{"messageId":"removeEscape","fix":{"range":[3811,3812],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[3811,3811],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":152,"column":63,"nodeType":"TemplateElement","messageId":"unnecessaryEscape","endLine":152,"endColumn":64,"suggestions":[{"messageId":"removeEscape","fix":{"range":[3815,3816],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[3815,3815],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":152,"column":70,"nodeType":"TemplateElement","messageId":"unnecessaryEscape","endLine":152,"endColumn":71,"suggestions":[{"messageId":"removeEscape","fix":{"range":[3822,3823],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[3822,3822],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":152,"column":74,"nodeType":"TemplateElement","messageId":"unnecessaryEscape","endLine":152,"endColumn":75,"suggestions":[{"messageId":"removeEscape","fix":{"range":[3826,3827],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[3826,3826],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":152,"column":80,"nodeType":"TemplateElement","messageId":"unnecessaryEscape","endLine":152,"endColumn":81,"suggestions":[{"messageId":"removeEscape","fix":{"range":[3832,3833],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[3832,3832],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":152,"column":84,"nodeType":"TemplateElement","messageId":"unnecessaryEscape","endLine":152,"endColumn":85,"suggestions":[{"messageId":"removeEscape","fix":{"range":[3836,3837],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[3836,3836],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":152,"column":91,"nodeType":"TemplateElement","messageId":"unnecessaryEscape","endLine":152,"endColumn":92,"suggestions":[{"messageId":"removeEscape","fix":{"range":[3843,3844],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[3843,3843],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":152,"column":95,"nodeType":"TemplateElement","messageId":"unnecessaryEscape","endLine":152,"endColumn":96,"suggestions":[{"messageId":"removeEscape","fix":{"range":[3847,3848],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[3847,3847],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":152,"column":102,"nodeType":"TemplateElement","messageId":"unnecessaryEscape","endLine":152,"endColumn":103,"suggestions":[{"messageId":"removeEscape","fix":{"range":[3854,3855],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[3854,3854],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]}],"suppressedMessages":[],"errorCount":27,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":8,"fixableWarningCount":0,"source":"export function getNameErrors(name: string): string[]\n{\n  var errors: string[] = [];\n  // name must be greater than 3 but less than 50\n  const nameLengthRegex = /^.{4,49}$/;\n\n  // Validating for SQL injection\n  if (validateSQLInjection(name))\n  {\n    errors.push(getSQLInjectionError(\"Field\"));\n  }\n  else if (!nameLengthRegex.test(name))\n  {\n    errors.push(\"This field must contain more than 3 characters\");\n  }\n  return errors;\n}\n\nexport function getUsernameErrors(username: string): string[]\n{\n  var errors: string[] = [];\n\n  if (username === \"\")\n  {\n    errors.push(\"Please enter a username\");\n  }\n  else if (validateSQLInjection(username))\n  {\n    errors.push(getSQLInjectionError(\"Username\"));\n  }\n  return errors;\n}\n\nexport function getIdNumberErrors(idNumber: string): string[]\n{\n  var errors: string[] = [];\n  const idFormatRegex = /^\\d{2}(0[1-9]|1[0-2])(0[1-9]|[12][0-9]|3[01])\\d{4}[01]\\d{1}\\d{1}$/\n\n  if (idNumber === \"\")\n  {\n    errors.push(\"Please enter your SA ID number\");\n  }\n  else if (validateSQLInjection(idNumber))\n  {\n    errors.push(getSQLInjectionError(\"ID Number\"));\n  }\n  else if (!idFormatRegex.test(idNumber))\n  {\n    errors.push(\"ID number is in an incorrect format\")\n  }\n  return errors;\n}\n\nexport function getAccountNumberErrors(accountNumber: string): string[]\n{\n  var errors: string[] = [];\n  const allDigitsRegex = /^\\d+$/\n\n  if (accountNumber === \"\")\n  {\n    errors.push(\"Please enter an Account Number\");\n  }\n  else if (validateSQLInjection(accountNumber))\n  {\n    errors.push(getSQLInjectionError(\"Account Number\"));\n  }\n  else if (accountNumber.length != 10)\n  {\n    errors.push(\"Account number must be 10 characters in length\");\n  }\n  else if (!allDigitsRegex.test(accountNumber))\n  {\n    errors.push(\"Account number must only contain digits\");\n  }\n  return errors;\n}\n\nexport function getPasswordErrors(password: string): string[]\n{\n  var errors: string[] = [];\n  const passwordComplexityRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&_])[A-Za-z\\d@$!%*?&_]{8,}$/;\n  // Validating for SQL injection\n  if (validateSQLInjection(password))\n  {\n    errors.push(getSQLInjectionError(\"Password\"));\n  }\n  else if (!passwordComplexityRegex.test(password))\n  {\n    errors.push(`\n      Passwords must contain contain: \n      at least 8 characters, one capital letter, one lowercase letter, one digit, and one special character`);\n  }\n  return errors;\n}\n\nexport function getConfirmPasswordErrors(password: string, confirmPassword: string): string[]\n{\n  var errors: string[] = [];\n  if (confirmPassword === \"\")\n  {\n    errors.push('Confirm Password cannot be empty');\n  }\n  else if (validateSQLInjection(confirmPassword))\n  {\n    errors.push(getSQLInjectionError(confirmPassword));\n  }\n  else if (confirmPassword != password)\n  {\n    errors.push(\"Passwords do not match\");\n  }\n  return errors;\n}\n\nexport function getTransferAmountErrors(amount: string): string[]\n{\n  var errors: string[] = [];\n  const amountFormatRegex = /^\\d+(\\.\\d{0,2})?$/;\n  if (amount === \"\")\n  {\n    errors.push('Transfer amount cannot be empty');\n  }\n  else if (validateSQLInjection(amount))\n  {\n    errors.push(getSQLInjectionError(\"Transfer Amount\"));\n  }\n  else if (!amountFormatRegex.test(amount))\n  {\n    errors.push(\"Transfer amount is in an incorrect format\");\n  }\n  return errors;\n}\n\nexport function getDescriptionErrors(description: string)\n{\n  var errors: string[] = [];\n  if (description === \"\")\n  {\n    errors.push(\"Please enter a description\");\n  }\n  else if (validateSQLInjection(description))\n  {\n    errors.push(getSQLInjectionError(\"Description\"));\n  }\n\n  return errors;\n}\n\nfunction getSQLInjectionError(fieldName: string): string\n{\n  return (`\n    ${fieldName} invalid: Please refrain from using the following terms and symbols\\n\n    \\'SELECT\\', \\'INSERT\\', \\'UPDATE\\', \\'DELETE\\', \\'DROP\\', \\'ALTER\\', \\'EXEC\\', \\'UNION\\', \\'WHERE\\', --, ;`)\n}\n\nfunction validateSQLInjection(input: string): boolean\n{\n  const sqlInjectionRegex = /\\b(SELECT|INSERT|UPDATE|DELETE|DROP|ALTER|EXEC|UNION|WHERE)\\b|;|--/i;\n\n  if (!sqlInjectionRegex.test(input))\n  {\n    return false;\n  }\n  return true\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/nicsmeyer/Documents/VSProjects/APDS7311-POE/client/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]